A split of an integer array is good if:

The array is split into three non-empty contiguous subarrays - named left,
mid, right respectively from left to right.
The sum of the elements in left is less than or equal to the sum of the 
elements in mid, and the sum of the elements in mid is less than or equal 
to the sum of the elements in right.
Given nums, an array of non-negative integers, return the number of 
good ways to split nums. As the number may be too large, return it modulo 109 + 7.


class Solution {
public:

    int mod = 1000000000 + 7;

    int helper(int left, int right, int cond, vector<int> &prefix_sum, int i) {
        int s = i;
        int e = prefix_sum[right+1];
        int index = -1;
        
        while(left <= right) {
            int mid = left + (right-left)/2;
            if(cond) {
                if(prefix_sum[mid] - prefix_sum[s-1] >= prefix_sum[s-1]) {
                    index = mid;
                    right = mid - 1;
                } else {
                    left = mid + 1;
                }
            } else {
                if(prefix_sum[mid] - prefix_sum[s-1] <= e - prefix_sum[mid]) {
                    index = mid;
                    left = mid + 1;
                } else {
                    right = mid - 1;
                }
            }

        }

        return index;
    }

    int waysToSplit(vector<int>& nums) {

        int n = nums.size();
        vector<int> prefix_sum(n, 0);
        prefix_sum[0] = nums[0];

        for(int i=1; i<n; i++) {
            prefix_sum[i] = prefix_sum[i-1] + nums[i];
        }
        
        long long ans = 0;
        for(int i=0; i<n-2; i++) { 
            int left = i + 1;
            int right = n - 2;

            int left_index = helper(left, right, true, prefix_sum, left);
            if(left_index == -1) {
                continue;
            }
            int right_index = helper(left_index, right, false, prefix_sum, left);
            if(right_index == -1) {
                continue;
            }
            // cout<<right_index<<" "<<left_index<<endl;
            ans = (ans + (right_index-left_index+1))%mod;
        }

        return (int)ans;
    }
};


// class Solution {
// public:
//     int mod = 1000000000 + 7;
//     int waysToSplit(vector<int>& nums) {
//         int n = nums.size();
        
//         vector<int> prefix_sum(n+1, 0);
        
//         for(int i=1; i<=n; i++) {
//             prefix_sum[i] = prefix_sum[i-1] + nums[i-1];
//         }
        
//         int ans = 0;
//         for(int i=0; i<n; i++) {
//             int l = i + 1;
//             int h = n - 1;
//             int start_sum = prefix_sum[i+1];
//             int end_sum = prefix_sum[n];

//             int index_ans = -1;
//             while(l <= h) {
//                 int mid = l + (h-l)/2;
//                 if(prefix_sum[mid+1] - start_sum <= end_sum - prefix_sum[mid+1]) {
//                     index_ans = mid;
//                     l = mid + 1;
//                 } else {
//                     h = mid - 1;
//                 }
//             }
//             if(index_ans != -1 && start_sum <= prefix_sum[index_ans+1] - start_sum) {
//                 ans = (ans + index_ans - i)%mod;
//             }
//         }

//         return ans;
//     }
// };

