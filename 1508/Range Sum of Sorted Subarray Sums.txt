Range Sum of Sorted Subarray Sums.txt

You are given the array nums consisting of n positive integers. You computed the sum of all non-empty continuous subarrays from the array and then sorted them in non-decreasing order, creating a new array of n * (n + 1) / 2 numbers.

Return the sum of the numbers from index left to index right (indexed from 1), inclusive, in the new array. Since the answer can be a huge number return it modulo 109 + 7.

class Solution {
public:
    int mod = 1000000000 + 7;
    int rangeSum(vector<int>& nums, int n, int left, int right) {
        
        priority_queue<int, vector<int>, greater<int>> pq;

        for(int i=0; i<n; i++) {
            int s = 0;
            for(int j=i; j<n; j++) {
                s += nums[j];
                pq.push(s);
            }
        }

        int ans = 0;
        int index = 0;
        left--;
        right--;
        while(index <= right) {
            if(index < left) {
                pq.pop();
            } else {
                ans += pq.top();
                ans %= mod;
                pq.pop();
            }
            index++;
        }

        return ans;
    }
};
