class Solution {
public:
    int minOperations(vector<int>& nums, int x) {
        unordered_map<int, int> mp;
        int val = 0;
        int steps = INT_MAX;
        for(int i=0; i<nums.size(); i++){
            val = val+nums[i];
            if(x-val>0){
                 mp[val] = i+1;     
            } else if(x-val == 0){
                steps = i+1;
                break;
            } else {
                break;
            }   
        }
        
        val = 0;
        
        for(int i=nums.size()-1; i>=0; i--){
            nums[i] = val+nums[i];
            val = nums[i];
            if(x-nums[i]>0){
                if(mp.find(x-nums[i]) != mp.end() && mp[x-nums[i]] -1 < i ){
                    if(steps > (nums.size()-i + mp[x-nums[i]])){
                        steps = nums.size()-i + mp[x-nums[i]];
                    }   
                }    
            } else if(x-nums[i]==0){
                if(steps>nums.size()-i){
                    steps = nums.size()-i;
                }
                break;
            } else {
                break;
            }
        }
    if(steps == INT_MAX){
        return -1;
    } else {
        return steps;
    }
    }
};

//solution 2 (sliding window protocol)

class Solution {
public:
    int minOperations(vector<int>& nums, int x) {
        int total = 0;
        for(auto it:nums) total += it;
        
        int j=0;
        int target = total-x;
        int steps = INT_MIN;
        
        if(target<0){
            return -1;
        }
        
        for(int i=0; i<nums.size(); i++){
            while(target > 0 && j < nums.size()){
                if(nums[j] <= target){
                    target = target - nums[j];
                    j++;
                } else {
                    break;
                }
            }
            
            if(target == 0){
                steps = max(j-i , steps);
                target = target + nums[i];
            } else if(target != 0 && j != nums.size()){
                target = target + nums[i];
            } else if(steps == INT_MIN && j == nums.size()){
                return -1;
            } else if( j == nums.size()){
               return nums.size()-steps; 
            }
            
                
        }
        return nums.size()-steps;
    }
};