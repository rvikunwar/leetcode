You have n jobs and m workers. You are given three arrays: 
difficulty, profit, and worker where:

difficulty[i] and profit[i] are the difficulty and the profit of the ith job, and
worker[j] is the ability of jth worker (i.e., the jth worker can only complete a 
job with difficulty at most worker[j]).
Every worker can be assigned at most one job, but one job can be completed
 multiple times.

For example, if three workers attempt the same job that pays $1, then the 
total profit will be $3. If a worker cannot complete any job, their profit is $0.
Return the maximum profit we can achieve after assigning the workers to the jobs.

class Solution {
public:
    int maxProfitAssignment(vector<int>& difficulty, vector<int>& profit, vector<int>& worker) {
        
        int size = worker.size();
        priority_queue<pair<int, int>, vector<pair<int, int>> , greater<pair<int, int>>> pq;
        sort(worker.begin(), worker.end());

        for(int i=0; i<difficulty.size(); i++){
            pq.push({ difficulty[i], profit[i] });
        }

        int profit_max = 0;
        int ans = 0;
        int i = 0;

        while(i < size) {
            if(!pq.empty() && pq.top().first <= worker[i]){
                profit_max = max(profit_max, pq.top().second);
                pq.pop();
            } else {
                ans += profit_max;
                i++;
            }
        }

        return ans;
    }
};