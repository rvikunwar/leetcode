/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* node1 = nullptr;
    TreeNode* node2 = nullptr;
    void swap(TreeNode* node_1, TreeNode* node_2){
        int temp = node_1->val;
        node_1->val = node_2->val;
        node_2->val = temp;
    }
    
    void checkNode(TreeNode* node, TreeNode* &pre){
        if(node->left){
            checkNode(node->left, pre);
        }
        
        if(pre && pre->val >= node->val){
            if(node1 == nullptr){
                node1 = pre;
            }
            node2 = node;
        }
        pre = node;
        
        if(node->right){
            checkNode(node->right, pre);
        }
    }
    
    void recoverTree(TreeNode* root) {
        TreeNode* pre = nullptr;
        checkNode(root, pre);
        swap(node1, node2);
    }
};
