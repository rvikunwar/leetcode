You are given an m x n binary matrix grid. An island is a group of 1's 
(representing land) connected 4-directionally (horizontal or vertical.) 
You may assume all four edges of the grid are surrounded by water.

The area of an island is the number of cells with a value 1 in the island.

Return the maximum area of an island in grid. If there is no island, return 0.


class DSU {
    public:
        vector<int> parent;
        vector<int> rank;
        DSU(int n) {
            parent.resize(n);
            rank.resize(n);

            for(int i=0; i<n; i++) {
                parent[i] = i;
            }
        }

        int find(int u) {
            if(u != parent[u]){
                parent[u] = find(parent[u]);
            }

            return parent[u];
        }

        void union_(int u, int v) {
            int root_u = find(u);
            int root_v = find(v);

            if(rank[root_u] > rank[root_v]){    
                parent[root_v] = root_u;
            } else if(rank[root_u] < rank[root_v]) {
                parent[root_u] = root_v;
            } else {
                parent[root_u] = root_v;
                rank[root_v]++;
            }
        }
};

class Solution {
public:
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        int row[] = {1, 0, -1, 0};
        int col[] = {0, -1, 0, 1};
        
        vector<vector<int>> visited(n, vector<int> (m, 0));
        DSU dsu(n*m);

        for(int i=0; i<n; i++) {
            for(int j=0; j<m; j++) {
                if(grid[i][j] == 1) {
                    for(int k=0; k<4; k++) {
                        int new_row = i + row[k];
                        int new_col = j + col[k];
                        if(new_row >= 0 && new_row < n && new_col >= 0 
                          && new_col < m && grid[new_row][new_col] == 1) {
                            visited[new_row][new_col] = 1;
                            dsu.union_(i*m+j, new_row*m + new_col);
                        }
                    }
                }
            }
        }

        unordered_map<int,int> ans_;
        int ans = 0;
        for(int i=0; i<n; i++) {
            for(int j=0; j<m; j++) { 
                if(grid[i][j] == 1) {
                    int val = dsu.find(i*m+j);
                    ans_[val]++;
                    ans = max(ans, ans_[val]);
                }
            }
        }

        return ans;
    }
};
