You are given a 0-indexed sorted array of integers nums.

You can perform the following operation any number of times:

Choose two indices, i and j, where i < j, such that nums[i] < nums[j].
Then, remove the elements at indices i and j from nums. The remaining elements retain their original order, and the array is re-indexed.
Return an integer that denotes the minimum length of nums after performing the operation any number of times (including zero).

Note that nums is sorted in non-decreasing order.


class Solution {
public:
    int minLengthAfterRemovals(vector<int>& nums) {
        unordered_map<int, int> mp;
        int size = nums.size();
        for(auto it: nums){
            mp[it]++;
        }

        int maxi = 0;
        for(auto it: mp){
            maxi = max(maxi, it.second);
        }

        if(maxi <= (size - maxi)){
            return size%2;
        } 
        return maxi - (size - maxi);
    
    }
};